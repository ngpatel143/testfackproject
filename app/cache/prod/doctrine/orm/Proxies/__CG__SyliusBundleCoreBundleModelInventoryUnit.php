<?php

namespace Proxies\__CG__\Sylius\Bundle\CoreBundle\Model;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class InventoryUnit extends \Sylius\Bundle\CoreBundle\Model\InventoryUnit implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'orderItem', 'shipment', 'shippingState', 'createdAt', 'updatedAt', 'stockable', 'inventoryState');
        }

        return array('__isInitialized__', 'id', 'orderItem', 'shipment', 'shippingState', 'createdAt', 'updatedAt', 'stockable', 'inventoryState');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (InventoryUnit $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getOrderItem()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrderItem', array());

        return parent::getOrderItem();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrderItem(\Sylius\Bundle\CoreBundle\Model\OrderItemInterface $orderItem = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrderItem', array($orderItem));

        return parent::setOrderItem($orderItem);
    }

    /**
     * {@inheritDoc}
     */
    public function getShipment()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShipment', array());

        return parent::getShipment();
    }

    /**
     * {@inheritDoc}
     */
    public function setShipment(\Sylius\Bundle\ShippingBundle\Model\ShipmentInterface $shipment = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShipment', array($shipment));

        return parent::setShipment($shipment);
    }

    /**
     * {@inheritDoc}
     */
    public function getShippable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShippable', array());

        return parent::getShippable();
    }

    /**
     * {@inheritDoc}
     */
    public function setShippable(\Sylius\Bundle\ShippingBundle\Model\ShippableInterface $shippable)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShippable', array($shippable));

        return parent::setShippable($shippable);
    }

    /**
     * {@inheritDoc}
     */
    public function getShippingState()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShippingState', array());

        return parent::getShippingState();
    }

    /**
     * {@inheritDoc}
     */
    public function setShippingState($state)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShippingState', array($state));

        return parent::setShippingState($state);
    }

    /**
     * {@inheritDoc}
     */
    public function getStockable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStockable', array());

        return parent::getStockable();
    }

    /**
     * {@inheritDoc}
     */
    public function setStockable(\Sylius\Bundle\InventoryBundle\Model\StockableInterface $stockable)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStockable', array($stockable));

        return parent::setStockable($stockable);
    }

    /**
     * {@inheritDoc}
     */
    public function getSku()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSku', array());

        return parent::getSku();
    }

    /**
     * {@inheritDoc}
     */
    public function getInventoryName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInventoryName', array());

        return parent::getInventoryName();
    }

    /**
     * {@inheritDoc}
     */
    public function getInventoryState()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInventoryState', array());

        return parent::getInventoryState();
    }

    /**
     * {@inheritDoc}
     */
    public function setInventoryState($state)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInventoryState', array($state));

        return parent::setInventoryState($state);
    }

    /**
     * {@inheritDoc}
     */
    public function isSold()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isSold', array());

        return parent::isSold();
    }

    /**
     * {@inheritDoc}
     */
    public function isBackordered()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isBackordered', array());

        return parent::isBackordered();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', array());

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', array($createAt));

        return parent::setCreatedAt($createAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', array());

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', array($updatedAt));

        return parent::setUpdatedAt($updatedAt);
    }

}
