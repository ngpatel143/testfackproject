<?php

namespace Proxies\__CG__\Sylius\Bundle\CoreBundle\Model;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ShippingMethod extends \Sylius\Bundle\CoreBundle\Model\ShippingMethod implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'zone', 'id', 'category', 'categoryRequirement', 'enabled', 'name', 'calculator', 'configuration', 'rules', 'createdAt', 'updatedAt');
        }

        return array('__isInitialized__', 'zone', 'id', 'category', 'categoryRequirement', 'enabled', 'name', 'calculator', 'configuration', 'rules', 'createdAt', 'updatedAt');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ShippingMethod $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getZone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getZone', array());

        return parent::getZone();
    }

    /**
     * {@inheritDoc}
     */
    public function setZone(\Sylius\Bundle\AddressingBundle\Model\ZoneInterface $zone)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setZone', array($zone));

        return parent::setZone($zone);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategory', array());

        return parent::getCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategory(\Sylius\Bundle\ShippingBundle\Model\ShippingCategoryInterface $category = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategory', array($category));

        return parent::setCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategoryRequirement()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategoryRequirement', array());

        return parent::getCategoryRequirement();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategoryRequirement($categoryRequirement)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategoryRequirement', array($categoryRequirement));

        return parent::setCategoryRequirement($categoryRequirement);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategoryRequirementLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategoryRequirementLabel', array());

        return parent::getCategoryRequirementLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function isEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEnabled', array());

        return parent::isEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnabled($enabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnabled', array($enabled));

        return parent::setEnabled($enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getCalculator()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCalculator', array());

        return parent::getCalculator();
    }

    /**
     * {@inheritDoc}
     */
    public function setCalculator($calculator)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCalculator', array($calculator));

        return parent::setCalculator($calculator);
    }

    /**
     * {@inheritDoc}
     */
    public function getConfiguration()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConfiguration', array());

        return parent::getConfiguration();
    }

    /**
     * {@inheritDoc}
     */
    public function setConfiguration(array $configuration)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConfiguration', array($configuration));

        return parent::setConfiguration($configuration);
    }

    /**
     * {@inheritDoc}
     */
    public function getRules()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRules', array());

        return parent::getRules();
    }

    /**
     * {@inheritDoc}
     */
    public function hasRule(\Sylius\Bundle\ShippingBundle\Model\RuleInterface $rule)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRule', array($rule));

        return parent::hasRule($rule);
    }

    /**
     * {@inheritDoc}
     */
    public function addRule(\Sylius\Bundle\ShippingBundle\Model\RuleInterface $rule)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRule', array($rule));

        return parent::addRule($rule);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRule(\Sylius\Bundle\ShippingBundle\Model\RuleInterface $rule)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRule', array($rule));

        return parent::removeRule($rule);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', array());

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', array($createdAt));

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', array());

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', array($updatedAt));

        return parent::setUpdatedAt($updatedAt);
    }

}
