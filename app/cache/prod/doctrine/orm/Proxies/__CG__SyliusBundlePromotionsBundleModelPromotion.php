<?php

namespace Proxies\__CG__\Sylius\Bundle\PromotionsBundle\Model;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Promotion extends \Sylius\Bundle\PromotionsBundle\Model\Promotion implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'name', 'description', 'priority', 'exclusive', 'usageLimit', 'used', 'startsAt', 'endsAt', 'couponBased', 'coupons', 'rules', 'actions', 'updatedAt', 'createdAt');
        }

        return array('__isInitialized__', 'id', 'name', 'description', 'priority', 'exclusive', 'usageLimit', 'used', 'startsAt', 'endsAt', 'couponBased', 'coupons', 'rules', 'actions', 'updatedAt', 'createdAt');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Promotion $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getPriority()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPriority', array());

        return parent::getPriority();
    }

    /**
     * {@inheritDoc}
     */
    public function setPriority($priority)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPriority', array($priority));

        return parent::setPriority($priority);
    }

    /**
     * {@inheritDoc}
     */
    public function isExclusive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isExclusive', array());

        return parent::isExclusive();
    }

    /**
     * {@inheritDoc}
     */
    public function setExclusive($exclusive)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExclusive', array($exclusive));

        return parent::setExclusive($exclusive);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsageLimit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsageLimit', array());

        return parent::getUsageLimit();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsageLimit($usageLimit)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsageLimit', array($usageLimit));

        return parent::setUsageLimit($usageLimit);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsed', array());

        return parent::getUsed();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsed($used)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsed', array($used));

        return parent::setUsed($used);
    }

    /**
     * {@inheritDoc}
     */
    public function incrementUsed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'incrementUsed', array());

        return parent::incrementUsed();
    }

    /**
     * {@inheritDoc}
     */
    public function getStartsAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStartsAt', array());

        return parent::getStartsAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setStartsAt(\DateTime $startsAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStartsAt', array($startsAt));

        return parent::setStartsAt($startsAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getEndsAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndsAt', array());

        return parent::getEndsAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setEndsAt(\DateTime $endsAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndsAt', array($endsAt));

        return parent::setEndsAt($endsAt);
    }

    /**
     * {@inheritDoc}
     */
    public function isCouponBased()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCouponBased', array());

        return parent::isCouponBased();
    }

    /**
     * {@inheritDoc}
     */
    public function setCouponBased($couponBased)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCouponBased', array($couponBased));

        return parent::setCouponBased($couponBased);
    }

    /**
     * {@inheritDoc}
     */
    public function getCoupons()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCoupons', array());

        return parent::getCoupons();
    }

    /**
     * {@inheritDoc}
     */
    public function hasCoupons()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasCoupons', array());

        return parent::hasCoupons();
    }

    /**
     * {@inheritDoc}
     */
    public function hasCoupon(\Sylius\Bundle\PromotionsBundle\Model\CouponInterface $coupon)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasCoupon', array($coupon));

        return parent::hasCoupon($coupon);
    }

    /**
     * {@inheritDoc}
     */
    public function addCoupon(\Sylius\Bundle\PromotionsBundle\Model\CouponInterface $coupon)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCoupon', array($coupon));

        return parent::addCoupon($coupon);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCoupon(\Sylius\Bundle\PromotionsBundle\Model\CouponInterface $coupon)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCoupon', array($coupon));

        return parent::removeCoupon($coupon);
    }

    /**
     * {@inheritDoc}
     */
    public function hasRules()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRules', array());

        return parent::hasRules();
    }

    /**
     * {@inheritDoc}
     */
    public function getRules()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRules', array());

        return parent::getRules();
    }

    /**
     * {@inheritDoc}
     */
    public function hasRule(\Sylius\Bundle\PromotionsBundle\Model\RuleInterface $rule)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRule', array($rule));

        return parent::hasRule($rule);
    }

    /**
     * {@inheritDoc}
     */
    public function addRule(\Sylius\Bundle\PromotionsBundle\Model\RuleInterface $rule)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRule', array($rule));

        return parent::addRule($rule);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRule(\Sylius\Bundle\PromotionsBundle\Model\RuleInterface $rule)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRule', array($rule));

        return parent::removeRule($rule);
    }

    /**
     * {@inheritDoc}
     */
    public function hasActions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasActions', array());

        return parent::hasActions();
    }

    /**
     * {@inheritDoc}
     */
    public function getActions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActions', array());

        return parent::getActions();
    }

    /**
     * {@inheritDoc}
     */
    public function hasAction(\Sylius\Bundle\PromotionsBundle\Model\ActionInterface $action)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasAction', array($action));

        return parent::hasAction($action);
    }

    /**
     * {@inheritDoc}
     */
    public function addAction(\Sylius\Bundle\PromotionsBundle\Model\ActionInterface $action)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAction', array($action));

        return parent::addAction($action);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAction(\Sylius\Bundle\PromotionsBundle\Model\ActionInterface $action)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAction', array($action));

        return parent::removeAction($action);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', array());

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', array($updatedAt));

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', array());

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', array($createdAt));

        return parent::setCreatedAt($createdAt);
    }

}
