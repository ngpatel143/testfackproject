<?php

namespace PHPCRProxies\__CG__\Symfony\Cmf\Bundle\BlockBundle\Doctrine\Phpcr;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ImagineBlock extends \Symfony\Cmf\Bundle\BlockBundle\Doctrine\Phpcr\ImagineBlock implements \Doctrine\Common\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'image', 'label', 'linkUrl', 'filter', 'node', 'id', 'name', 'parentDocument', 'ttl', 'settings', 'createdAt', 'updatedAt', 'publishable', 'publishStartDate', 'publishEndDate', 'locale');
        }

        return array('__isInitialized__', 'image', 'label', 'linkUrl', 'filter', 'node', 'id', 'name', 'parentDocument', 'ttl', 'settings', 'createdAt', 'updatedAt', 'publishable', 'publishStartDate', 'publishEndDate', 'locale');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ImagineBlock $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', array());

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setLabel($label)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLabel', array($label));

        return parent::setLabel($label);
    }

    /**
     * {@inheritDoc}
     */
    public function getLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLabel', array());

        return parent::getLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setLinkUrl($url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLinkUrl', array($url));

        return parent::setLinkUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function getLinkUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinkUrl', array());

        return parent::getLinkUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setFilter($filter)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFilter', array($filter));

        return parent::setFilter($filter);
    }

    /**
     * {@inheritDoc}
     */
    public function getFilter()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFilter', array());

        return parent::getFilter();
    }

    /**
     * {@inheritDoc}
     */
    public function setImage($image = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImage', array($image));

        return parent::setImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function getImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage', array());

        return parent::getImage();
    }

    /**
     * {@inheritDoc}
     */
    public function getNode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNode', array());

        return parent::getNode();
    }

    /**
     * {@inheritDoc}
     */
    public function isSettingsValid(\Symfony\Component\Validator\ExecutionContext $context)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isSettingsValid', array($context));

        return parent::isSettingsValid($context);
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', array($type));

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function setEnabled($enabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnabled', array($enabled));

        return parent::setEnabled($enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEnabled', array());

        return parent::getEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setPosition($position)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPosition', array($position));

        return parent::setPosition($position);
    }

    /**
     * {@inheritDoc}
     */
    public function getPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPosition', array());

        return parent::getPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', array($createdAt));

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', array());

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', array($updatedAt));

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', array());

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublishable($publishable)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublishable', array($publishable));

        return parent::setPublishable($publishable);
    }

    /**
     * {@inheritDoc}
     */
    public function isPublishable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPublishable', array());

        return parent::isPublishable();
    }

    /**
     * {@inheritDoc}
     */
    public function getPublishStartDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublishStartDate', array());

        return parent::getPublishStartDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublishStartDate(\DateTime $publishStartDate = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublishStartDate', array($publishStartDate));

        return parent::setPublishStartDate($publishStartDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getPublishEndDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublishEndDate', array());

        return parent::getPublishEndDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublishEndDate(\DateTime $publishEndDate = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublishEndDate', array($publishEndDate));

        return parent::setPublishEndDate($publishEndDate);
    }

    /**
     * {@inheritDoc}
     */
    public function addChildren(\Sonata\BlockBundle\Model\BlockInterface $children)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addChildren', array($children));

        return parent::addChildren($children);
    }

    /**
     * {@inheritDoc}
     */
    public function getChildren()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChildren', array());

        return parent::getChildren();
    }

    /**
     * {@inheritDoc}
     */
    public function hasChildren()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasChildren', array());

        return parent::hasChildren();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setParentDocument($parent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParentDocument', array($parent));

        return parent::setParentDocument($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getParentDocument()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParentDocument', array());

        return parent::getParentDocument();
    }

    /**
     * {@inheritDoc}
     */
    public function setParent(\Sonata\BlockBundle\Model\BlockInterface $parent = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', array($parent));

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', array());

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function hasParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasParent', array());

        return parent::hasParent();
    }

    /**
     * {@inheritDoc}
     */
    public function setTtl($ttl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTtl', array($ttl));

        return parent::setTtl($ttl);
    }

    /**
     * {@inheritDoc}
     */
    public function getTtl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTtl', array());

        return parent::getTtl();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function setSettings(array $settings = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSettings', array($settings));

        return parent::setSettings($settings);
    }

    /**
     * {@inheritDoc}
     */
    public function getSettings()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSettings', array());

        return parent::getSettings();
    }

    /**
     * {@inheritDoc}
     */
    public function setSetting($name, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSetting', array($name, $value));

        return parent::setSetting($name, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function getSetting($name, $default = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSetting', array($name, $default));

        return parent::getSetting($name, $default);
    }

    /**
     * {@inheritDoc}
     */
    public function getDashifiedId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDashifiedId', array());

        return parent::getDashifiedId();
    }

    /**
     * {@inheritDoc}
     */
    public function getDashifiedType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDashifiedType', array());

        return parent::getDashifiedType();
    }

    /**
     * {@inheritDoc}
     */
    public function getLocale()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocale', array());

        return parent::getLocale();
    }

    /**
     * {@inheritDoc}
     */
    public function setLocale($locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocale', array($locale));

        return parent::setLocale($locale);
    }

}
